React vs Next
1. In react, frontend and backend have to maintain in seperate folder. While in Next it's not.
2. React does not provide routing out of the box, while nextjs has file based router.
3. React is not SEO optimised.
- not exactly teur today because of React Server Components
4. Waterfalling problem which react have

SEO
- Google has crawlers (which scan the website).
- In react, the initial HTML file does not contain anything. It was JS that put the content in the HTML file afterwards.

Waterfalling
- In React, HTML, CSS, Js comes one after the other. While in NEXT, all the things comes in a single requests.

NEXT offering
1. Server side rendering - Get’s rid of SEO problems
2. API routes - Single codebase with frontend and backend
3. File based routing (no need for react-router-dom)
4. Bundle size optimisations, Static site generation

Downsides
1. Can’t be distributed via a CDN, always needs a server running that does server side rendering and hence is expensive
2. Very opinionated, very hard to move out of it


Layout
- layout for seperate route can be formed by Layout.tsx inside the specific folder
- if you want to ignore some step route, enclose them inside ()

TODO: IMPORTANT 
Client-Side Components
- things that don't sense to run on the server, has to be a client component (like useState, useEffect, onclick)
by writing "use client" at the top
- but after making something a client side component, all the nextjs offering like Server Side rendering, SEO optimised, get away.
- for this try to make the client ide component as low as you can.
- like in SigninBox, i make the button a seperate componentso that i can make the button a client side component not the whole SigninBox.




NEXTJS BACKEND
- In Next, we can define a async components (But you can only run async component in server-side only, not in client-side)
- for making a loader, you just have to make a loader.tsx file, write a loader animation code. Just it.
- for writing the Backend code, you have to first make a folder name "api"
- for making a route, you have to make the folder of that name and make "route.ts" file in it.

PRISMA
- npm install prisma
- npx prisma init
- write the model and paster the postgres URL in .env file
- npx prisma migrate dev --name init_schema
- npx prisma generate