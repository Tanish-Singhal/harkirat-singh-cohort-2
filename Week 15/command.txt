Docker Commands

- docker
to check if the docker is installed in the system or not.

- docker images
to see, what all the images we have installed in our docker

- docker ps
to see, what all the images we are currently running in our system

- docker pull mongo
it will pull the image from docker registory.

- docker run mongo
to run the image, but if you don't have to image locally it will automatically pull it from the registory

- docker run -d mongo
if you run the above command without -d, then you have to use another terminal to run other commands. To fix this you can detached the run commands by writing -d.

- docker run -p 27018:27017 mongo
to map the port of the local machine to the image port (local machine port : mongo machine port)

- docker run -d -p 27018:27017 mongo

- docker kill <container_id>
to kill a running container

- docker rmi -f <image_id>
to delete the image from the machine

- docker logs <container_id>
to see all the logs of a specific container




Dockerfile
--------------------
FROM node:16-alpine                   // Base Image
FROM mhart/alpine-node

WORKDIR /usr/src/app                  // Working directory

COPY package* .
COPY ./prisma .

RUN npm install
RUN npx prisma generate

COPY . .                              // it will copy all the things from the server code to my directory (/app)

RUN npm run build

EPOSE 3000

CMD ["node", "dist/index.js"]         // final command that run when trunning hte container
------------------------


- docker build -t <image_name> .
- docker build -t <image_name>:v1-dev .
this is how you create the image of a docker file

- npx prisma generate

- docker run -p 3000:3000 -e DATABASE_URL="database url" <image_name>
this you can aboe to send the environment variables to your project without deploying it on github or docker hub




- docker exec -it <running_container_id> /bin/bash
to execute a command inside a container 

- exit
to exit from the container

- docker push your_username/your_reponame:tagname
Pushing the dockerfile to docker hub

- docker volume ls 
to list down all the volume you have created in the past

- docker volume create <volume_database_name>
to create a colume for a database

- docker run -v volume_database:/data/db -p 27017:27017 mongo
this is the location where the data was stored in the volumes

- docker network ls 
to list down all the network you have created in the past

- docker network create my_custom_network
to create a network, by which different container can talk to each other

- docker run -d -v volume_database:/data/db --name mongotanish --network my_custom_network -p 27017:27017 mongo
this is how you start the backend process in docker with the network

- docker run -d -v volume_database:/data/db --name mongo --network my_custom_network -p 27017:27017 mongo
this is how you start the mongodb database locally with the volume and the network

- docker logs <container_id>
to see all the logs of a container




Pushing the image on DOCKERHUB
- create account on docker hub and create a repository (repo name - tanish/backend)
- to push it on docer hub, how ahve to locally build the images using the repo name in which you want to push the code (docker build -t tanish/backend .)
- run this command (docker login)
- docker push tanish/backend
or
- docker build -t tanish/backend:v1-dev .
- docker push tanish/backend:v1-dev


Docker Compose
- docker network create tanish_network
- docker volume create volume_database